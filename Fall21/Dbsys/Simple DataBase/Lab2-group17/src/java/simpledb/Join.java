package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {
	
	
    private JoinPredicate predicate;
    private OpIterator opChild1, opChild2;
    private TupleDesc tupleDescMerged;
    private TupleDesc tupleDescLeft;
    private TupleDesc tupleDescRight;
    private Tuple tup1 = null;

    private static final long serialVersionUID = 1L;

    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        // some code goes here
    	
    	//initializing class attributes
    	 this.predicate = p;	
         this.opChild1 = child1;	
         this.opChild2 = child2;
         
         this.tupleDescLeft = opChild1.getTupleDesc();	// getting left tupleDesc for child1
         this.tupleDescRight = opChild2.getTupleDesc(); // getting right tupleDesc for child2
         
         tupleDescMerged = TupleDesc.merge(tupleDescLeft, tupleDescRight); //joining both child's tupleDescs using merge
    	
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
    	
    	 return predicate; // returning the predicate 
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here
    	
    	int field = predicate.getField1(); //getting field index of first tuple of predicate
    	String fieldName = tupleDescLeft.getFieldName(field); // gets the field name of the input field
    	return fieldName; // returns the field name
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
    	int field = predicate.getField2(); //getting field index of second tuple of predicate
    	String fieldName = tupleDescRight.getFieldName(field); // gets the field name of the input field
    	return fieldName; // returns the field name
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
    	
    	return  TupleDesc.merge(tupleDescLeft, tupleDescRight); //joining both child's tupleDescs using merge;//tupleDescMerged; // returning joined tupleDesc
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
    	
    	//opening
    	 opChild1.open();
         opChild2.open();
         super.open();
    }

    public void close() {
        // some code goes here
    	
    	//closing
    	super.close();
        opChild2.close();
        opChild1.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
    	
    	//rewinding
    	opChild1.rewind();
        opChild2.rewind(); 	
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
    	// loop around child1
    	
    	
    	for(;!(!opChild1.hasNext() && tup1==null) ; opChild2.rewind()) { // loop until child does not have next and tuple is null, and rewind opIterator child on each iteration    		
    		
    		//child 1
    		// checking if the tuple1 is null
    	
    		 if (tup1==null) {
                 tup1 = opChild1.next(); // if null tuple is assigned the next child value
             }
    		 
    		 // child 2
    		 while (opChild2.hasNext()) { //loop until child2 has no next
    			 
                 Tuple tup2 = opChild2.next(); // assign the next Child2 

                 // if match, create a combined tuple and fill it with the values
                 // from both tuples
                 if (!predicate.filter(tup1, tup2))  //if field number differs
                     {continue;}
                 
                 // creating a merged tuple
                 TupleDesc tup1Td = tup1.getTupleDesc();
                 TupleDesc tup2Td = tup2.getTupleDesc();
                 int tup1Nf = tup1Td.numFields();
                 int tup2Nf = tup2Td.numFields();

                 // putting values in merged tuple
                 Tuple mergedTuple = new Tuple(tupleDescMerged);
                 
                 for (int i = 0; i < tup1Nf; i++)
                     mergedTuple.setField(i, tup1.getField(i));
                 
                 for (int i = 0; i < tup2Nf; i++)
                     mergedTuple.setField(tup1Nf + i, tup2.getField(i));
                 
                 return mergedTuple;
             
    		 }
    		 
    		 tup1 = null;
    
    	}
   
        return null;
    }

    @Override
    public OpIterator[] getChildren() {
        // some code goes here
    	return new OpIterator[] { this.opChild1, this.opChild2 };
    }

    @Override
    public void setChildren(OpIterator[] children) {
        // some code goes here
    	 this.opChild1 = children[0];
         this.opChild2 = children[1];
    }

}
